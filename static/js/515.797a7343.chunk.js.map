{"version":3,"file":"static/js/515.797a7343.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/EnteringMessages/EnteringMessages.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.jsx","components/common/FormsControls/FormsControls.jsx","hoc/withAuthRedirect.js","webpack://react-kabzda-1/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ylOaC\",\"dialog\":\"Dialogs_dialog__HUc52\",\"dialogsItems\":\"Dialogs_dialogsItems__xQYhA\",\"active\":\"Dialogs_active__OZq9V\",\"messages\":\"Dialogs_messages__24306\",\"myMessage\":\"Dialogs_myMessage__l1Q8e\",\"theirMessage\":\"Dialogs_theirMessage__hBEPD\",\"message\":\"Dialogs_message__JBn5H\",\"dialogAvatar\":\"Dialogs_dialogAvatar__E2i65\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img className={s.dialogAvatar}\r\n                 src={\"https://st.depositphotos.com/46542440/55685/i/450/depositphotos_556850692-stock-illustration-square-face-character-stiff-art.jpg\"}/>\r\n              <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\nexport const Message = (props) => {\r\n    const messageClass = props.isMine ? s.myMessage : s.theirMessage\r\n\r\n    return (\r\n        <div className={`${s.message} ${messageClass}`}>{props.message}</div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport const EnteringMessages = ({ addMessage, newMessageText }) => {\r\n    return (\r\n        <TextareaForm\r\n            addMessage={addMessage}\r\n            newMessageText={newMessageText}\r\n        />\r\n    );\r\n};\r\n\r\nconst SignupSchema  = Yup.object().shape({\r\n    message: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(50, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nconst TextareaForm = ({ addMessage, newMessageText }) => {\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={SignupSchema}\r\n            enableReinitialize={true} // Синхронизация с внешним состоянием Redux\r\n            initialValues={{ message: newMessageText }}\r\n            onSubmit={(values, { resetForm }) => {\r\n                addMessage(values.message); // Отправка сообщения\r\n                resetForm(); // Очистка формы после отправки\r\n            }}\r\n        >\r\n            {({ values, handleChange }) => (\r\n                <Form>\r\n                    <Field\r\n                        name=\"message\"\r\n                        as=\"textarea\"\r\n                        value={values.message}\r\n                        onChange={handleChange}\r\n                        component={TextArea}\r\n                        placeholder=\"Enter your message\"\r\n                    />\r\n                    <button type=\"submit\">Add message</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\n","import {Dialogs} from \"./Dialogs\";\r\nimport {addMessageCreator} from \"../../redux/dialogs-reduser\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageText) => {\r\n            dispatch(addMessageCreator(newMessageText));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// export const DialogsContainer\r\n//     = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {EnteringMessages} from \"./EnteringMessages/EnteringMessages\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Dialogs = (props) => {\r\n    // debugger\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    let messageElements = state.messages.map(m => <Message key={m.id} message={m.message} isMine={m.isMine}/>);\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <EnteringMessages\r\n                    upDateNewMessageBody={props.upDateNewMessageBody}\r\n                    newMessageText={state.newMessageText}\r\n                    dispatch={props.dispatch}\r\n                    addMessage={props.addMessage}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport s from './FormsControls.module.css';\r\n\r\nexport const FormControl = ({ field, form: { touched, errors }, component: Component = \"input\", ...props }) => {\r\n\r\n    const { componentProps, ...restProps } = props; // Извлекаем componentProps, чтобы он не попал в DOM\r\n    const error = errors[field.name] && touched[field.name];\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${error ? s.error : \"\"}`}>\r\n            <div>\r\n                <Component {...field} {...restProps} {...componentProps} />\r\n            </div>\r\n            {error && <span>{errors[field.name]}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\n//................................................................\r\n\r\nexport const TextArea = ({ field, form: {touched, errors}, ...props}) => {\r\n\r\n    // debugger\r\n    const error = errors[field.name] && touched[field.name];\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${error ? s.error : ''}`}>\r\n            <div>\r\n                <textarea {...field} {...props}/>\r\n            </div>\r\n            {error && <span>{errors[field.name]}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({ field, form: {touched, errors}, ...props}) => {\r\n\r\n    const error = errors[field.name] && touched[field.name];\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${error ? s.error : ''}`}>\r\n            <div>\r\n                <input {...field} {...props}/>\r\n            </div>\r\n            {error && <span>{errors[field.name]}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// не работает \"field, form:\" undefined\r\n// import React from 'react';\r\n// import s from './FormsControls.module.css';\r\n//\r\n// // Один кусок кода\r\n// export const FormControls = ({field, form: {touched, errors}, children, ...props}) => {\r\n//     debugger\r\n//     const error = errors[field.name] && touched[field.name];\r\n//\r\n//     return (\r\n//         <div className={`${s.formControl} ${error ? s.error : ''}`}>\r\n//             <div>\r\n//                 {props.children}\r\n//             </div>\r\n//             {error && <span>{errors[field.name]}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n//\r\n// // 2 обертки над ним\r\n// export const TextArea = ({field, ...props}) => {\r\n//     return <FormControls {...props}> <textarea {...field} {...props}/></FormControls>\r\n// }\r\n// export const Input = ({field, ...props}) => {\r\n//     return <FormControls {...props}> <input {...field} {...props}/></FormControls>\r\n// }","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) =>({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if(!this.props.isAuth) {\r\n                return <Navigate to=\"/login\"/>\r\n            }\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectedComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectedComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__gMU-B\",\"error\":\"FormsControls_error__boSMr\",\"formSummaryError\":\"FormsControls_formSummaryError__1YObT\"};"],"names":["DialogItem","props","_jsxs","className","s","children","_jsx","src","NavLink","to","id","name","Message","messageClass","isMine","message","EnteringMessages","_ref","addMessage","newMessageText","TextareaForm","SignupSchema","Yup","shape","min","max","required","_ref2","Formik","validationSchema","enableReinitialize","initialValues","onSubmit","values","_ref3","resetForm","_ref4","handleChange","Form","Field","as","value","onChange","component","TextArea","placeholder","type","compose","connect","state","dialogsPage","dispatch","addMessageCreator","withAuthRedirect","dialogsElements","dialogs","map","d","messageElements","messages","m","upDateNewMessageBody","FormControl","field","form","touched","errors","Component","componentProps","restProps","error","formControl","mapStateToProps","isAuth","auth","RedirectComponent","React","render","this","Navigate"],"sourceRoot":""}