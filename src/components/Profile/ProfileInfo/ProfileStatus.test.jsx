import React from "react";
import { render, screen } from "@testing-library/react";
import { ProfileStatus } from "./ProfileStatus";
import { fireEvent } from "@testing-library/react";

describe("ProfileStatus component", () => {
    test("after creation span should contains correct status", () => {
        render(<ProfileStatus status="it-kamasutra.com" />);
        expect(screen.getByText("it-kamasutra.com")).toBeInTheDocument();
    });

    test("after creation span should be displayed", () => {
        render(<ProfileStatus status="it-kamasutra.com" />);
        const span = screen.getByTestId("profile-span");
        expect(span).toBeInTheDocument();
        expect(span).not.toBeNull();
        expect(span).toHaveTextContent("it-kamasutra.com");  // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    });

    test("after creation input shouldn't be displayed", () => {
        render(<ProfileStatus status="it-kamasutra.com" />);
        const input = screen.queryByTestId("profile-input");
        expect(input).toBeNull();
    });

    test('span should contain correct status', () => {
        render(<ProfileStatus status="it-kamasutra.com" />);
        const spanElement = screen.getByText(/it-kamasutra.com/i);
        expect(spanElement).toHaveTextContent('it-kamasutra.com'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ span
    });

    test('input should be displayed in editMode instead of span', () => {
        render(<ProfileStatus status="it-kamasutra.com" />);
        const spanElement = screen.getByTestId("profile-span");

        fireEvent.click(spanElement); // üëà –ò–º–∏—Ç–∞—Ü–∏—è –∫–ª–∏–∫–∞

        const input = screen.getByTestId("profile-input");
        expect(input.value).toBe('it-kamasutra.com'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º value, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ input
    });

    test("callback should be called when input loses focus", () => {
        const mockCallback = jest.fn();
        render(<ProfileStatus status="it-kamasutra.com" uDateStatus={mockCallback} />);

        const spanElement = screen.getByTestId("profile-span");
        fireEvent.click(spanElement); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        const inputElement = screen.getByTestId("profile-input");
        fireEvent.blur(inputElement); // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞

        expect(mockCallback).toHaveBeenCalledTimes(1);
    });
});
