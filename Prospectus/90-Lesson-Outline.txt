В данном уроке рефакторим код по всему сайту и учимся писать по стандарту (правильно и чисто).
1) в редюсерах объявление констант для action. Текстовое значение создаем уникальным. Решает ситуацию, когда экшны в разных редюсерах идентичны:
const ADD_POST = 'socialNetwork/profile/ADD_POST';
объяснение: "название сайта/название редюсера/название события"

2) Не разделять actionCreator thunkCreator Reducer и тд, по разным файлам, а писасть все в редюсере, где все это используется. Структура файла Reducer:
//actions
//reducer
//actionCreators
//thunkCreators

3) В thunkCreators использовать async...await вместо .then.
Изначальный синтаксис thunkCreator:
export const getUserStatus = (currUserId) => dispatch => {
	profileAPI.getUserStatus(currUserId).then( data => dispatch (setUserStatus(data)) )
}
Измененный синтаксис thunkCreator:
export const getUserStatus = (currUserId) => async dispatch => {
	let data = await profileAPI.getUserStatus(currUserId)
	dispatch (setUserStatus(data))
}

4) Избавление от дублирующегося кода (создание компонент или вынос одинаковой логики в отдельную функцию)
 Важные моменты этапа:
-  все переменные которые используем (dispatch, props и тд), передаем либо через props (если создаем новую компоненту), либо при вызове функции: func(dispatch, props.userId, ...rest)
-  если передаем методы, то передаем только их ссылки (follow) а не их вызовы (follow(userId))
-  если передаем метод вызваный из объекта (usersAPI.followUser), то при дальнейшей передаче лучше использовать .bind, чтобы возвращаемо значение не потерялось (usersAPI.followUser.bind(usersAPI))

5) BrowserRouter вынесли из App в index.js
export let rerenderEntireTree = (state) => {
	root.render(
		<React.StrictMode>
			<BrowserRouter>
				<Provider store={store}>
					<App state={state}/>
				</Provider>
			</BrowserRouter>
		</React.StrictMode>
	);
}

6) Деструктуризация props. Все что приходит в компоненту через props реструктуризируем в объект при инициализации компоненты
const LoginForm = ( {handleSubmit, error} ) => {
	return(
		<form onSubmit={handleSubmit}>
			...
		</form>
	)
}
Важно. В классовых компонентах, лучше проводить деструктуризацию. В некоторых ситуациях, без деструктуризации будут возникать непредвиденные ошибки